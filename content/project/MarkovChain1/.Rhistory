####check col####
for(i in 1:9){
if(board[row, i] == entry)
return(FALSE)
}
####check box####
#see if row is in top, middle, or bottom of box
if(row == 1 | row == 4 | row == 7){
row.index = 1
}
if(row == 2 | row == 5 | row == 8){
row.index = 2
}
if(row == 3 | row == 5 | row == 9){
row.index = 3
}
#see if column is in left, middle, or right of box
if(col == 1 | col == 4 | col == 7){
col.index = 1
}
if(col == 2 | col == 5 | col == 8){
col.index = 2
}
if(col == 3 | col == 5 | col == 9){
col.index = 3
}
#loop through rows and columns of the correct box
if(row.index == 1 & col.index == 1){
for(i in 1:3)
for(j in 1:3){
if(board[i,j] == entry){
return(FALSE)
}
}
}
if(row.index == 1 & col.index == 2){
for(i in 1:3)
for(j in 4:6){
if(board[i,j] == entry){
return(FALSE)
}
}
}
if(row.index == 1 & col.index == 3){
for(i in 1:3)
for(j in 7:9){
if(board[i,j] == entry){
return(FALSE)
}
}
}
if(row.index == 2 & col.index == 1){
for(i in 4:6)
for(j in 1:3){
if(board[i,j] == entry){
return(FALSE)
}
}
}
if(row.index == 2 & col.index == 2){
for(i in 4:6)
for(j in 4:6){
if(board[i,j] == entry){
return(FALSE)
}
}
}
if(row.index == 2 & col.index == 3){
for(i in 4:6)
for(j in 7:9){
if(board[i,j] == entry){
return(FALSE)
}
}
}
if(row.index == 3 & col.index == 1){
for(i in 7:9)
for(j in 1:3){
if(board[i,j] == entry){
return(FALSE)
}
}
}
if(row.index == 3 & col.index == 2){
for(i in 7:9)
for(j in 4:6){
if(board[i,j] == entry){
return(FALSE)
}
}
}
if(row.index == 3 & col.index == 3){
for(i in 7:9)
for(j in 7:9){
if(board[i,j] == entry){
return(FALSE)
}
}
}
return(TRUE)
}
solve <- function(board){
#loop through board
for(i in 1:9)
for(j in 1:9){
#found an empty spot, try to fill-in
if(board[i,j] == 0){
for(n in 1:9){
if(valid(n,board,i,j)){
board[i,j] = n
}
}
}
}
}
solve(m)
test <- solve(m)
test
solve <- function(board){
board
#loop through board
for(i in 1:9)
for(j in 1:9){
#found an empty spot, try to fill-in
if(board[i,j] == 0){
for(n in 1:9){
if(valid(n,board,i,j)){
board[i,j] = n
}
}
}
}
}
m
solve(m)
print(board)
solve <- function(board){
print(board)
#loop through board
for(i in 1:9)
for(j in 1:9){
#found an empty spot, try to fill-in
if(board[i,j] == 0){
for(n in 1:9){
if(valid(n,board,i,j)){
board[i,j] = n
}
}
}
}
}
solve(m)
solve <- function(board){
print(board)
#loop through board
for(i in 1:9)
for(j in 1:9){
#found an empty spot, try to fill-in
if(board[i,j] == 0){
for(n in 1:9){
if(valid(n,board,i,j)){
board[i,j] = n
}
print(board)
}
}
}
}
solve(m)
solve <- function(board){
print(board)
#loop through board
for(i in 1:9)
for(j in 1:9){
#found an empty spot, try to fill-in
if(board[i,j] == 0){
for(n in 1:10){
if(valid(n,board,i,j)){
board[i,j] = n
}
print(board)
}
}
}
}
solve(m)
solve <- function(board){
#loop through board
for(i in 1:9)
for(j in 1:9){
#found an empty spot, try to fill-in
if(board[i,j] == 0){
for(n in 1:10){
if(valid(n,board,i,j)){
board[i,j] = n
}
}
}
}
print(board)
}
solve(m)
solve <- function(board){
#loop through board
for(i in 1:9)
for(j in 1:9){
#found an empty spot, try to fill-in
if(board[i,j] == 0){
for(n in 1:9){
if(valid(n,board,i,j)){
board[i,j] = n
}
}
}
}
print(board)
}
solve(m)
m
solve(m)
valid <- function(entry, board, row, col){
####check row####
for(i in 1:9){
if(board[i, col] == entry)
return(FALSE)
}
####check col####
for(i in 1:9){
if(board[row, i] == entry)
return(FALSE)
}
####check box####
#see if row is in top, middle, or bottom of box
if(row == 1 | row == 4 | row == 7){
row.index = 1
}
else if(row == 2 | row == 5 | row == 8){
row.index = 2
}
else if(row == 3 | row == 5 | row == 9){
row.index = 3
}
#see if column is in left, middle, or right of box
if(col == 1 | col == 4 | col == 7){
col.index = 1
}
else if(col == 2 | col == 5 | col == 8){
col.index = 2
}
else if(col == 3 | col == 5 | col == 9){
col.index = 3
}
#loop through rows and columns of the correct box
if(row.index == 1 & col.index == 1){
for(i in 1:3)
for(j in 1:3){
if(board[i,j] == entry){
return(FALSE)
}
}
}
else if(row.index == 1 & col.index == 2){
for(i in 1:3)
for(j in 4:6){
if(board[i,j] == entry){
return(FALSE)
}
}
}
else if(row.index == 1 & col.index == 3){
for(i in 1:3)
for(j in 7:9){
if(board[i,j] == entry){
return(FALSE)
}
}
}
else if(row.index == 2 & col.index == 1){
for(i in 4:6)
for(j in 1:3){
if(board[i,j] == entry){
return(FALSE)
}
}
}
else if(row.index == 2 & col.index == 2){
for(i in 4:6)
for(j in 4:6){
if(board[i,j] == entry){
return(FALSE)
}
}
}
else if(row.index == 2 & col.index == 3){
for(i in 4:6)
for(j in 7:9){
if(board[i,j] == entry){
return(FALSE)
}
}
}
else if(row.index == 3 & col.index == 1){
for(i in 7:9)
for(j in 1:3){
if(board[i,j] == entry){
return(FALSE)
}
}
}
else if(row.index == 3 & col.index == 2){
for(i in 7:9)
for(j in 4:6){
if(board[i,j] == entry){
return(FALSE)
}
}
}
else if(row.index == 3 & col.index == 3){
for(i in 7:9)
for(j in 7:9){
if(board[i,j] == entry){
return(FALSE)
}
}
}
return(TRUE)
}
solve(m)
solve <- function(board){
#loop through board
for(i in 1:9)
for(j in 1:9){
#found an empty spot, try to fill-in
if(board[i,j] == 0){
for(n in 1:9){
if(valid(n,board,i,j)){
board[i,j] = n
solve(board)
board[i,j] = n
}
return()
}
}
}
print(board)
}
solve(m)
solve <- function(board){
#loop through board
for(i in 1:9)
for(j in 1:9){
#found an empty spot, try to fill-in
if(board[i,j] == 0){
for(n in 1:10){
if(valid(n,board,i,j)){
board[i,j] = n
solve(board)
board[i,j] = n
}
return()
}
}
}
print(board)
}
solve(m)
m
solve(m)
solve <- function(board){
#loop through board
for(i in 1:9)
for(j in 1:9){
#found an empty spot, try to fill-in
if(board[i,j] == 0){
for(n in 1:10){
if(valid(n,board,i,j)){
board[i,j] = n
if(solve(board)){
return(TRUE)
}
board[i,j] = n
}
return(FALSE)
}
}
}
}
solve(m)
m
m <- solve(m)
m
solve <- function(){
#loop through board
for(i in 1:9)
for(j in 1:9){
#found an empty spot, try to fill-in
if(board[i,j] == 0){
for(n in 1:10){
if(valid(n,board,i,j)){
board[i,j] = n
if(solve(board)){
return(TRUE)
}
board[i,j] = n
}
return(FALSE)
}
}
}
}
board <- matrix(0, 9, 9)
board
solve <- function(){
#loop through board
for(i in 1:9)
for(j in 1:9){
#found an empty spot, try to fill-in
if(board[i,j] == 0){
for(n in 1:10){
if(valid(n,board,i,j)){
board[i,j] = n
if(solve(board)){
return(TRUE)
}
board[i,j] = n
}
return(FALSE)
}
}
}
}
board
solve()
solve <- function(){
#loop through board
for(i in 1:9)
for(j in 1:9){
#found an empty spot, try to fill-in
if(board[i,j] == 0){
for(n in 1:10){
if(valid(n,board,i,j)){
board[i,j] = n
if(solve(board)){
return(TRUE)
}
board[i,j] = n
}
return(FALSE)
}
}
}
}
solve()
solve <- function(){
#loop through board
for(i in 1:9)
for(j in 1:9){
#found an empty spot, try to fill-in
if(board[i,j] == 0){
for(n in 1:10){
if(valid(n,board,i,j)){
board[i,j] = n
if(solve()){
return(TRUE)
}
board[i,j] = n
}
return(FALSE)
}
}
}
}
solve()
board
board[1,1] = 2
board[3,7] = 8
solve()
board
board = [
[7,8,0,4,0,0,1,2,0],
[6,0,0,0,7,5,0,0,9],
[0,0,0,6,0,1,0,7,8],
[0,0,7,0,4,0,2,6,0],
[0,0,1,0,5,0,9,3,0],
[9,0,4,0,6,0,0,0,5],
[0,7,0,3,0,0,0,1,2],
[1,2,0,0,0,7,4,0,0],
[0,4,9,2,0,6,0,0,7]
]
install.packages("MARSS")
sqrt(48^2 + 48^2)
48*sqrt(2)
library(season)
library(gnm)
library(survival)
data(CVDdaily)
CVDdaily=subset(CVDdaily,date<=as.Date('1987-12-31')) # subset for example
CVDdaily
setwd("~/Desktop/website/content/project/MarkovChain1")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
servr::daemon_stop(10)
servr::daemon_stop(10)
blogdown::serve_site()
